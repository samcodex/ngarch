import { d3Element } from '@core/svg/d3-def-types';

export enum LineEndShapeId {
  DropShadowLight = 'drop-shadow-light',
  DropShadow = 'drop-shadow',
  Triangle = 'Triangle',
  ArrowLine = 'ArrowLine',
  Rhombus = 'Rhombus'
}

export namespace svg_defs {

  export function defineDropShadow(defs: d3Element) {
    const filter = defs.append('filter')
      .attr('id', LineEndShapeId.DropShadow)
      .attr('height', '150%');

    filter.append('feGaussianBlur')
      .attr('in', 'SourceAlpha')
      .attr('stdDeviation', 6)
      .attr('result', 'blur');

    filter.append('feOffset')
      .attr('in', 'blur')
      .attr('dx', 2)
      .attr('dy', 5)
      .attr('result', 'offsetBlur');

    const feMerge = filter.append('feMerge');
    feMerge.append('feMergeNode')
      .attr('in', 'offsetBlur');
    feMerge.append('feMergeNode')
      .attr('in', 'SourceGraphic');

    defineDropShadowLight(defs);
  }

  function defineDropShadowLight(defs: d3Element) {
    const filter = defs.append('filter')
      .attr('id', LineEndShapeId.DropShadowLight)
      .attr('height', '150%');

    filter.append('feGaussianBlur')
      .attr('in', 'SourceAlpha')
      .attr('stdDeviation', 3)
      .attr('result', 'blur');

    filter.append('feOffset')
      .attr('in', 'blur')
      .attr('dx', 2)
      .attr('dy', 2)
      .attr('result', 'offsetBlur');

    const feMerge = filter.append('feMerge');
    feMerge.append('feMergeNode')
      .attr('in', 'offsetBlur');
    feMerge.append('feMergeNode')
      .attr('in', 'SourceGraphic');
  }

  export function defineTriangleShape(defs: d3Element) {
    const marker = defs.append('marker');
    marker
      .attr('id', LineEndShapeId.Triangle)
      .attr('viewBox', '0 0 10 10')
      .attr('refX', '10')
      .attr('refY', '5')
      .attr('markerWidth', '10')
      .attr('markerHeight', '10')
      .attr('orient', 'auto');
    marker.append('path')
      .attr('d', 'M 0 0 L 10 5 L 0 10 z')
      .attr('fill', 'black')
      .attr('stroke', 'black')
      .attr('stroke-width', '0.5');
  }

  export function defineArrowShape(defs: d3Element) {
    const marker = defs.append('marker');
    marker
      .attr('id', LineEndShapeId.ArrowLine)
      .attr('viewBox', '0 0 5 5')
      .attr('refX', '4')
      .attr('refY', '2')
      .attr('markerWidth', '15')
      .attr('markerHeight', '15')
      .attr('orient', 'auto');
    marker.append('path')
      .attr('d', 'M 0,0 L 4,2 L 0,4')
      .attr('fill', 'none')
      .attr('stroke', 'black')
      .attr('stroke-width', '0.3');
  }

  export function defineRhombusShape(defs: d3Element) {
    const length = 20;
    const half = length / 2;
    const paths = createRhombusPath(length, length);
    const marker = defs.append('marker');
    marker
      .attr('id', LineEndShapeId.Rhombus)
      // .attr('refX', length)
      .attr('refY', half)
      .attr('markerWidth', length)
      .attr('markerHeight', length)
      .attr('orient', 'auto');
    marker.append('path')
      .attr('d', paths)
      .attr('fill', 'black')
      ;
  }
}

function createRhombusPath(width: number, height: number, margin = 0) {
  const halfHeight = height / 2;
  const thirdHeight = height / 4;
  const halfWidth = width / 2;
  const noMarginHeight = height - margin;
  const noMarginWidth = width - margin;

  return `M ${margin} ${halfHeight}`
    + ` L ${halfWidth} ${noMarginHeight - thirdHeight}`
    + ` L ${noMarginWidth} ${halfHeight}`
    + ` L ${halfWidth} ${margin + thirdHeight} Z`;
}

// tslint:disable-next-line:max-line-length
export const twoGearsPath = 'M 32.21875 2.0625 L 27.84375 3.78125 L 28.625 7.5625 C 28.320313 7.867188 27.996094 8.21875 27.65625 8.59375 L 23.90625 7.75 L 22.0625 12.0625 L 25.25 14.1875 C 25.214844 14.714844 25.214844 15.253906 25.25 15.78125 L 21.96875 17.78125 L 23.6875 22.15625 L 27.375 21.40625 C 27.707031 21.804688 28.070313 22.167969 28.46875 22.5 L 27.625 26.1875 L 31.96875 28.03125 L 34.09375 24.84375 C 34.625 24.878906 35.125 24.878906 35.65625 24.84375 L 37.6875 28.125 L 42.0625 26.40625 L 41.21875 22.40625 C 41.613281 22.078125 41.953125 21.703125 42.28125 21.3125 L 46.09375 22.28125 L 47.96875 17.90625 L 44.65625 15.875 C 44.6875 15.355469 44.6875 14.863281 44.65625 14.34375 L 47.9375 12.3125 L 46.21875 7.9375 L 42.40625 8.78125 C 42.078125 8.386719 41.707031 8.015625 41.3125 7.6875 L 42.15625 4 L 37.8125 2.15625 L 35.78125 5.34375 C 35.257813 5.292969 34.730469 5.265625 34.21875 5.3125 Z M 35 11 C 37.210938 11 39 12.789063 39 15 C 39 17.210938 37.210938 19 35 19 C 32.789063 19 31 17.210938 31 15 C 31 12.789063 32.789063 11 35 11 Z M 13.53125 20 L 12.90625 24 C 12.355469 24.175781 11.796875 24.425781 11.25 24.71875 L 7.90625 22.28125 L 4.40625 25.78125 L 6.71875 29.15625 C 6.441406 29.703125 6.222656 30.253906 6.03125 30.8125 L 2 31.5625 L 2 36.4375 L 6 37.15625 C 6.175781 37.710938 6.421875 38.292969 6.71875 38.84375 L 4.28125 42.09375 L 7.78125 45.59375 L 11.15625 43.28125 C 11.699219 43.558594 12.257813 43.777344 12.8125 43.96875 L 13.4375 48 L 18.34375 48 L 19.0625 44 C 19.621094 43.824219 20.199219 43.578125 20.75 43.28125 L 24.09375 45.71875 L 27.59375 42.21875 L 25.1875 38.84375 C 25.460938 38.300781 25.652344 37.742188 25.84375 37.1875 L 30 36.4375 L 30 31.53125 L 25.90625 30.90625 C 25.730469 30.355469 25.480469 29.792969 25.1875 29.25 L 27.59375 25.90625 L 24.125 22.28125 L 20.71875 24.71875 C 20.183594 24.445313 19.644531 24.222656 19.09375 24.03125 L 18.46875 20 Z M 16 30 C 18.199219 30 20 31.800781 20 34 C 20 36.199219 18.199219 38 16 38 C 13.800781 38 12 36.199219 12 34 C 12 31.800781 13.800781 30 16 30 Z ';
// tslint:disable-next-line:max-line-length
export const firstGearOfTwo = 'M 32.21875 2.0625 L 27.84375 3.78125 L 28.625 7.5625 C 28.320313 7.867188 27.996094 8.21875 27.65625 8.59375 L 23.90625 7.75 L 22.0625 12.0625 L 25.25 14.1875 C 25.214844 14.714844 25.214844 15.253906 25.25 15.78125 L 21.96875 17.78125 L 23.6875 22.15625 L 27.375 21.40625 C 27.707031 21.804688 28.070313 22.167969 28.46875 22.5 L 27.625 26.1875 L 31.96875 28.03125 L 34.09375 24.84375 C 34.625 24.878906 35.125 24.878906 35.65625 24.84375 L 37.6875 28.125 L 42.0625 26.40625 L 41.21875 22.40625 C 41.613281 22.078125 41.953125 21.703125 42.28125 21.3125 L 46.09375 22.28125 L 47.96875 17.90625 L 44.65625 15.875 C 44.6875 15.355469 44.6875 14.863281 44.65625 14.34375 L 47.9375 12.3125 L 46.21875 7.9375 L 42.40625 8.78125 C 42.078125 8.386719 41.707031 8.015625 41.3125 7.6875 L 42.15625 4 L 37.8125 2.15625 L 35.78125 5.34375 C 35.257813 5.292969 34.730469 5.265625 34.21875 5.3125 Z M 35 11 C 37.210938 11 39 12.789063 39 15 C 39 17.210938 37.210938 19 35 19 C 32.789063 19 31 17.210938 31 15 C 31 12.789063 32.789063 11 35 11 Z ';
// tslint:disable-next-line:max-line-length
export const secondGearOfTwo = 'M 13.53125 20 L 12.90625 24 C 12.355469 24.175781 11.796875 24.425781 11.25 24.71875 L 7.90625 22.28125 L 4.40625 25.78125 L 6.71875 29.15625 C 6.441406 29.703125 6.222656 30.253906 6.03125 30.8125 L 2 31.5625 L 2 36.4375 L 6 37.15625 C 6.175781 37.710938 6.421875 38.292969 6.71875 38.84375 L 4.28125 42.09375 L 7.78125 45.59375 L 11.15625 43.28125 C 11.699219 43.558594 12.257813 43.777344 12.8125 43.96875 L 13.4375 48 L 18.34375 48 L 19.0625 44 C 19.621094 43.824219 20.199219 43.578125 20.75 43.28125 L 24.09375 45.71875 L 27.59375 42.21875 L 25.1875 38.84375 C 25.460938 38.300781 25.652344 37.742188 25.84375 37.1875 L 30 36.4375 L 30 31.53125 L 25.90625 30.90625 C 25.730469 30.355469 25.480469 29.792969 25.1875 29.25 L 27.59375 25.90625 L 24.125 22.28125 L 20.71875 24.71875 C 20.183594 24.445313 19.644531 24.222656 19.09375 24.03125 L 18.46875 20 Z M 16 30 C 18.199219 30 20 31.800781 20 34 C 20 36.199219 18.199219 38 16 38 C 13.800781 38 12 36.199219 12 34 C 12 31.800781 13.800781 30 16 30 Z ';


export const firstGearOfThree = `M61.2,341.538c4.9,16.8,11.7,33,20.3,48.2l-24.5,30.9c-8,10.1-7.1,24.5,1.9,33.6l42.2,42.2c9.1,9.1,23.5,9.899,33.6,1.899
		l30.7-24.3c15.8,9.101,32.6,16.2,50.1,21.2l4.6,39.5c1.5,12.8,12.3,22.4,25.1,22.4h59.7c12.8,0,23.6-9.601,25.1-22.4l4.4-38.1
		c18.8-4.9,36.8-12.2,53.7-21.7l29.7,23.5c10.1,8,24.5,7.1,33.6-1.9l42.2-42.2c9.1-9.1,9.9-23.5,1.9-33.6l-23.1-29.3
		c9.6-16.601,17.1-34.3,22.1-52.8l35.6-4.1c12.801-1.5,22.4-12.3,22.4-25.1v-59.7c0-12.8-9.6-23.6-22.4-25.1l-35.1-4.1
		c-4.801-18.3-12-35.8-21.199-52.2l21.6-27.3c8-10.1,7.1-24.5-1.9-33.6l-42.1-42.1c-9.1-9.1-23.5-9.9-33.6-1.9l-26.5,21
		c-17.2-10.1-35.601-17.8-54.9-23l-4-34.3c-1.5-12.8-12.3-22.4-25.1-22.4h-59.7c-12.8,0-23.6,9.6-25.1,22.4l-4,34.3
		c-19.8,5.3-38.7,13.3-56.3,23.8l-27.5-21.8c-10.1-8-24.5-7.1-33.6,1.9l-42.2,42.2c-9.1,9.1-9.9,23.5-1.9,33.6l23,29.1
		c-9.2,16.6-16.2,34.3-20.8,52.7l-36.8,4.2c-12.8,1.5-22.4,12.3-22.4,25.1v59.7c0,12.8,9.6,23.6,22.4,25.1L61.2,341.538z
		 M277.5,180.038c54.4,0,98.7,44.3,98.7,98.7s-44.3,98.7-98.7,98.7c-54.399,0-98.7-44.3-98.7-98.7S223.1,180.038,277.5,180.038z`;

export const secondGearOfThree = `M867.699,356.238l-31.5-26.6c-9.699-8.2-24-7.8-33.199,0.9l-17.4,16.3c-14.699-7.1-30.299-12.1-46.4-15l-4.898-24
		c-2.5-12.4-14-21-26.602-20l-41.1,3.5c-12.6,1.1-22.5,11.4-22.9,24.1l-0.799,24.4c-15.801,5.7-30.701,13.5-44.301,23.3
		l-20.799-13.8c-10.602-7-24.701-5-32.9,4.7l-26.6,31.7c-8.201,9.7-7.801,24,0.898,33.2l18.201,19.399
		c-6.301,14.2-10.801,29.101-13.4,44.4l-26,5.3c-12.4,2.5-21,14-20,26.601l3.5,41.1c1.1,12.6,11.4,22.5,24.1,22.9l28.1,0.899
		c5.102,13.4,11.801,26.101,19.9,38l-15.699,23.7c-7,10.6-5,24.7,4.699,32.9l31.5,26.6c9.701,8.2,24,7.8,33.201-0.9l20.6-19.3
		c13.5,6.3,27.699,11,42.299,13.8l5.701,28.2c2.5,12.4,14,21,26.6,20l41.1-3.5c12.6-1.1,22.5-11.399,22.9-24.1l0.9-27.601
		c15-5.3,29.199-12.5,42.299-21.399l22.701,15c10.6,7,24.699,5,32.9-4.7l26.6-31.5c8.199-9.7,7.799-24-0.9-33.2l-18.301-19.399
		c6.701-14.2,11.602-29.2,14.4-44.601l25-5.1c12.4-2.5,21-14,20-26.601l-3.5-41.1c-1.1-12.6-11.4-22.5-24.1-22.9l-25.1-0.8
		c-5.201-14.6-12.201-28.399-20.9-41.2l13.699-20.6C879.4,378.638,877.4,364.438,867.699,356.238z M712.801,593.837
		c-44.4,3.801-83.602-29.3-87.301-73.699c-3.801-44.4,29.301-83.601,73.699-87.301c44.4-3.8,83.602,29.301,87.301,73.7
		C790.301,550.938,757.199,590.138,712.801,593.837z`;

export const thirdGearOfThree = `M205,704.438c-12.6,1.3-22.3,11.899-22.4,24.6l-0.3,25.3c-0.2,12.7,9.2,23.5,21.8,25.101l18.6,2.399
		c3.1,11.301,7.5,22.101,13.2,32.301l-12,14.8c-8,9.899-7.4,24.1,1.5,33.2l17.7,18.1c8.9,9.1,23.1,10.1,33.2,2.3l14.899-11.5
		c10.5,6.2,21.601,11.101,33.2,14.5l2,19.2c1.3,12.6,11.9,22.3,24.6,22.4l25.301,0.3c12.699,0.2,23.5-9.2,25.1-21.8l2.3-18.2
		c12.601-3.101,24.601-7.8,36-14l14,11.3c9.9,8,24.101,7.4,33.201-1.5l18.1-17.7c9.1-8.899,10.1-23.1,2.301-33.2L496.6,818.438
		c6.6-11,11.701-22.7,15.201-35l16.6-1.7c12.6-1.3,22.299-11.9,22.4-24.6l0.299-25.301c0.201-12.699-9.199-23.5-21.799-25.1
		l-16.201-2.1c-3.1-12.2-7.699-24-13.699-35l10.1-12.4c8-9.9,7.4-24.1-1.5-33.2l-17.699-18.1c-8.9-9.101-23.102-10.101-33.201-2.3
		l-12.101,9.3c-11.399-6.9-23.6-12.2-36.399-15.8l-1.601-15.7c-1.3-12.601-11.899-22.3-24.6-22.4l-25.3-0.3
		c-12.7-0.2-23.5,9.2-25.101,21.8l-2,15.601c-13.199,3.399-25.899,8.6-37.699,15.399l-12.5-10.2c-9.9-8-24.101-7.399-33.201,1.5
		l-18.2,17.801c-9.1,8.899-10.1,23.1-2.3,33.199l10.7,13.801c-6.2,11-11.1,22.699-14.3,35L205,704.438z M368.3,675.837
		c36.3,0.4,65.399,30.301,65,66.601c-0.4,36.3-30.301,65.399-66.601,65c-36.3-0.4-65.399-30.3-65-66.601
		C302.1,704.538,332,675.438,368.3,675.837z`;


// tslint:disable-next-line:max-line-length
const curlyBracketPath = 'M 19.8,25.8 C 19.8,11.2 15.6,2.2 0,0.4 L 0.4,0 C 23,0.4 29.2,7.2 29.2,29 L 29.2,59.2 C 29.2,72.6 30.6,79 45.2,82.6 L 45.2,83 C 30.8,86.6 29.2,93 29.2,106.2 L 29.2,138.4 C 29.2,159.4 21.4,165.4 0.4,166 L 0,165.601 C 16,163.201 19.8,155.201 19.8,140 L 19.8,107.8 C 19.8,94.2 21.6,86.4 36.6,83 L 36.6,82.6 C 21.4,79 19.8,70.6 19.8,57 L 19.8,25.8 z ';
export function appendRightBracket(d3Node: d3Element, leftBracket = false) {
  const bracket = d3Node.append('g');
  const matrix = leftBracket ? 'matrix(-1,0,0,1,44.655574,0.8894748)' : '';
  bracket.attr('transform', `${matrix}`);
  const path = bracket.append('path').attr('d', curlyBracketPath);

  return {
    group: bracket,
    path: path
  };
}

export function appendLeftBracket(d3Node: d3Element) {
  return appendRightBracket(d3Node, true);
}
